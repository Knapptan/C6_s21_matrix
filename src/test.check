#include "s21_matrix.h"

#include <check.h>
#include <stdlib.h>

#test s21_create_matrix_1
  matrix_t A = {0};
  int error = s21_create_matrix(-3, 2, &A);
  ck_assert_int_eq(error, 1);
  s21_remove_matrix(&A);


#test s21_create_matrix_2
  matrix_t A = {0};
  int error = s21_create_matrix(2, -2, &A);
  ck_assert_int_eq(error, 1);
  s21_remove_matrix(&A);


#test s21_create_matrix_3
  matrix_t A = {0};
  int error = s21_create_matrix(2, 2, &A);
  ck_assert_int_eq(error, 0);
  s21_remove_matrix(&A);


#test s21_create_matrix_4
  matrix_t A = {0};
  int error = s21_create_matrix(20, 20, &A);
  ck_assert_int_eq(error, 0);
  s21_remove_matrix(&A);


#test s21_create_matrix_5
  matrix_t A = {0};
  int error = s21_create_matrix(0, 0, &A);
  ck_assert_int_eq(error, 1);
  s21_remove_matrix(&A);


#test s21_eq_matrix_1
  matrix_t A = {0}, B = {0};
  int error = s21_create_matrix(2, 2, &A);
  ck_assert_int_eq(error, 0);
  error = s21_create_matrix(3, 2, &B);
  ck_assert_int_eq(error, 0);
  error = s21_eq_matrix(&A, &B);
  ck_assert_int_eq(error, 0);
  s21_remove_matrix(&A);
  s21_remove_matrix(&B);


#test s21_eq_matrix_2
  matrix_t A = {0}, B = {0};
  int error = s21_create_matrix(2, 2, &A);
  ck_assert_int_eq(error, 0);
  error = s21_create_matrix(2, 3, &B);
  ck_assert_int_eq(error, 0);
  error = s21_eq_matrix(&A, &B);
  ck_assert_int_eq(error, 0);
  s21_remove_matrix(&A);
  s21_remove_matrix(&B);


#test s21_eq_matrix_3
  matrix_t A = {0}, B = {0};
  int error = s21_create_matrix(2, 3, &A);
  ck_assert_int_eq(error, 0);
  error = s21_eq_matrix(&A, &B);
  ck_assert_int_eq(error, 0);
  s21_remove_matrix(&A);
  s21_remove_matrix(&B);


#test s21_eq_matrix_4
  matrix_t A = {0}, B = {0};
  int error = s21_create_matrix(2, 3, &B);
  ck_assert_int_eq(error, 0);
  error = s21_eq_matrix(&A, &B);
  ck_assert_int_eq(error, 0);
  s21_remove_matrix(&A);
  s21_remove_matrix(&B);


#test s21_eq_matrix_5
  matrix_t A = {0}, B = {0};
  int error = s21_create_matrix(2, 3, &A);
  ck_assert_int_eq(error, 0);
  s21_full_matrix(1.0, &A);
  error = s21_create_matrix(2, 3, &B);
  ck_assert_int_eq(error, 0);
  s21_full_matrix(1.0, &B);
  error = s21_eq_matrix(&A, &B);
  ck_assert_int_eq(error, 1);
  s21_remove_matrix(&A);
  s21_remove_matrix(&B);


#test s21_eq_matrix_6
  matrix_t A = {0}, B = {0};
  int error = s21_create_matrix(2, 3, &A);
  ck_assert_int_eq(error, 0);
  s21_full_matrix(1.0000001, &A);
  error = s21_create_matrix(2, 3, &B);
  ck_assert_int_eq(error, 0);
  s21_full_matrix(1.0000001, &B);
  B.matrix[1][2] = 1.0000002;
  error = s21_eq_matrix(&A, &B);
  ck_assert_int_eq(error, 0);
  s21_remove_matrix(&A);
  s21_remove_matrix(&B);


#test s21_sum_matrix_1
  matrix_t A = {0}, B = {0}, result = {0};
  int error = s21_create_matrix(2, 2, &A);
  ck_assert_int_eq(error, 0);
  error = s21_create_matrix(3, 2, &B);
  ck_assert_int_eq(error, 0);
  error = s21_sum_matrix(&A, &B, &result);
  ck_assert_int_eq(error, 2);
  s21_remove_matrix(&A);
  s21_remove_matrix(&B);
  s21_remove_matrix(&result);


#test s21_sum_matrix_2
  matrix_t A = {0}, B = {0}, result = {0};
  int error = s21_create_matrix(2, 2, &A);
  ck_assert_int_eq(error, 0);
  error = s21_create_matrix(2, 3, &B);
  ck_assert_int_eq(error, 0);
  error = s21_sum_matrix(&A, &B, &result);
  ck_assert_int_eq(error, 2);
  s21_remove_matrix(&A);
  s21_remove_matrix(&B);
  s21_remove_matrix(&result);


#test s21_sum_matrix_3
  matrix_t A = {0}, B = {0}, result = {0};
  int error = s21_create_matrix(2, 2, &A);
  ck_assert_int_eq(error, 0);
  error = s21_create_matrix(2, 2, &B);
  ck_assert_int_eq(error, 0);
  s21_remove_matrix(&A);
  error = s21_sum_matrix(&A, &B, &result);
  ck_assert_int_eq(error, 1);
  s21_remove_matrix(&B);
  s21_remove_matrix(&result);


#test s21_sum_matrix_4
  matrix_t A = {0}, B = {0}, result = {0};
  int error = s21_create_matrix(2, 2, &A);
  ck_assert_int_eq(error, 0);
  error = s21_create_matrix(2, 2, &B);
  ck_assert_int_eq(error, 0);
  s21_remove_matrix(&B);
  error = s21_sum_matrix(&A, &B, &result);
  ck_assert_int_eq(error, 1);
  s21_remove_matrix(&A);
  s21_remove_matrix(&result);


#test s21_sum_matrix_5
  matrix_t A = {0}, B = {0}, Z = {0}, result = {0};
  int error = s21_create_matrix(2, 2, &A);
  ck_assert_int_eq(error, 0);
  s21_full_matrix(1.0, &A);
  error = s21_create_matrix(2, 2, &B);
  ck_assert_int_eq(error, 0);
  s21_full_matrix(1.0, &B);
  error = s21_sum_matrix(&A, &B, &result);
  ck_assert_int_eq(error, 0);
  error = s21_create_matrix(2, 2, &Z);
  ck_assert_int_eq(error, 0);
  Z.matrix[0][0] = 2.0;
  Z.matrix[0][1] = 4.0;
  Z.matrix[1][0] = 6.0;
  Z.matrix[1][1] = 8.0;
  error = s21_eq_matrix(&result, &Z);
  ck_assert_int_eq(error, 1);
  s21_remove_matrix(&A);
  s21_remove_matrix(&B);
  s21_remove_matrix(&Z);
  s21_remove_matrix(&result);


#test s21_sum_matrix_6
  matrix_t A = {0}, B = {0}, Z = {0}, result = {0};
  int error = s21_create_matrix(3, 3, &A);
  ck_assert_int_eq(error, 0);
  A.matrix[0][0] = 1.0;
  A.matrix[0][1] = 2.0;
  A.matrix[0][2] = 3.0;
  A.matrix[1][0] = 0.0;
  A.matrix[1][1] = 4.0;
  A.matrix[1][2] = 5.0;
  A.matrix[2][0] = 0.0;
  A.matrix[2][1] = 0.0;
  A.matrix[2][2] = 6.0;
  error = s21_create_matrix(3, 3, &B);
  ck_assert_int_eq(error, 0);
  B.matrix[0][0] = 1.0;
  B.matrix[0][1] = 0.0;
  B.matrix[0][2] = 0.0;
  B.matrix[1][0] = 2.0;
  B.matrix[1][1] = 0.0;
  B.matrix[1][2] = 0.0;
  B.matrix[2][0] = 3.0;
  B.matrix[2][1] = 4.0;
  B.matrix[2][2] = 1.0;
  error = s21_sum_matrix(&A, &B, &result);
  ck_assert_int_eq(error, 0);
  error = s21_create_matrix(3, 3, &Z);
  ck_assert_int_eq(error, 0);
  Z.matrix[0][0] = 2.0;
  Z.matrix[0][1] = 2.0;
  Z.matrix[0][2] = 3.0;
  Z.matrix[1][0] = 2.0;
  Z.matrix[1][1] = 4.0;
  Z.matrix[1][2] = 5.0;
  Z.matrix[2][0] = 3.0;
  Z.matrix[2][1] = 4.0;
  Z.matrix[2][2] = 7.0;
  error = s21_eq_matrix(&result, &Z);
  ck_assert_int_eq(error, 1);
  s21_remove_matrix(&A);
  s21_remove_matrix(&B);
  s21_remove_matrix(&Z);
  s21_remove_matrix(&result);


#test s21_sub_matrix_1
  matrix_t A = {0}, B = {0}, result = {0};
  int error = s21_create_matrix(2, 2, &A);
  ck_assert_int_eq(error, 0);
  error = s21_create_matrix(3, 2, &B);
  ck_assert_int_eq(error, 0);
  error = s21_sub_matrix(&A, &B, &result);
  ck_assert_int_eq(error, 2);
  s21_remove_matrix(&A);
  s21_remove_matrix(&B);
  s21_remove_matrix(&result);


#test s21_sub_matrix_2
  matrix_t A = {0}, B = {0}, result = {0};
  int error = s21_create_matrix(2, 2, &A);
  ck_assert_int_eq(error, 0);
  error = s21_create_matrix(2, 3, &B);
  ck_assert_int_eq(error, 0);
  error = s21_sub_matrix(&A, &B, &result);
  ck_assert_int_eq(error, 2);
  s21_remove_matrix(&A);
  s21_remove_matrix(&B);
  s21_remove_matrix(&result);


#test s21_sub_matrix_3
  matrix_t A = {0}, B = {0}, result = {0};
  int error = s21_create_matrix(2, 2, &A);
  ck_assert_int_eq(error, 0);
  error = s21_create_matrix(2, 2, &B);
  ck_assert_int_eq(error, 0);
  s21_remove_matrix(&A);
  error = s21_sub_matrix(&A, &B, &result);
  ck_assert_int_eq(error, 1);
  s21_remove_matrix(&B);
  s21_remove_matrix(&result);


#test s21_sub_matrix_4
  matrix_t A = {0}, B = {0}, result = {0};
  int error = s21_create_matrix(2, 2, &A);
  ck_assert_int_eq(error, 0);
  error = s21_create_matrix(2, 2, &B);
  ck_assert_int_eq(error, 0);
  s21_remove_matrix(&B);
  error = s21_sub_matrix(&A, &B, &result);
  ck_assert_int_eq(error, 1);
  s21_remove_matrix(&A);
  s21_remove_matrix(&result);


#test s21_sub_matrix_5
  matrix_t A = {0}, B = {0}, Z = {0}, result = {0};
  int error = s21_create_matrix(2, 2, &A);
  ck_assert_int_eq(error, 0);
  s21_full_matrix(1.0, &A);
  error = s21_create_matrix(2, 2, &B);
  ck_assert_int_eq(error, 0);
  s21_full_matrix(1.0, &B);
  error = s21_sub_matrix(&A, &B, &result);
  ck_assert_int_eq(error, 0);
  error = s21_create_matrix(2, 2, &Z);
  ck_assert_int_eq(error, 0);
  Z.matrix[0][0] = 0.0;
  Z.matrix[0][1] = 0.0;
  Z.matrix[1][0] = 0.0;
  Z.matrix[1][1] = 0.0;
  error = s21_eq_matrix(&result, &Z);
  ck_assert_int_eq(error, 1);
  s21_remove_matrix(&A);
  s21_remove_matrix(&B);
  s21_remove_matrix(&Z);
  s21_remove_matrix(&result);


#test s21_sub_matrix_6
  matrix_t A = {0}, B = {0}, Z = {0}, result = {0};
  int error = s21_create_matrix(3, 3, &A);
  ck_assert_int_eq(error, 0);
  A.matrix[0][0] = 1.0;
  A.matrix[0][1] = 2.0;
  A.matrix[0][2] = 3.0;
  A.matrix[1][0] = 0.0;
  A.matrix[1][1] = 4.0;
  A.matrix[1][2] = 5.0;
  A.matrix[2][0] = 0.0;
  A.matrix[2][1] = 0.0;
  A.matrix[2][2] = 6.0;
  error = s21_create_matrix(3, 3, &B);
  ck_assert_int_eq(error, 0);
  B.matrix[0][0] = 1.0;
  B.matrix[0][1] = 0.0;
  B.matrix[0][2] = 0.0;
  B.matrix[1][0] = 2.0;
  B.matrix[1][1] = 0.0;
  B.matrix[1][2] = 0.0;
  B.matrix[2][0] = 3.0;
  B.matrix[2][1] = 4.0;
  B.matrix[2][2] = 1.0;
  error = s21_sub_matrix(&A, &B, &result);
  ck_assert_int_eq(error, 0);
  error = s21_create_matrix(3, 3, &Z);
  ck_assert_int_eq(error, 0);
  Z.matrix[0][0] = 0.0;
  Z.matrix[0][1] = 2.0;
  Z.matrix[0][2] = 3.0;
  Z.matrix[1][0] = -2.0;
  Z.matrix[1][1] = 4.0;
  Z.matrix[1][2] = 5.0;
  Z.matrix[2][0] = -3.0;
  Z.matrix[2][1] = -4.0;
  Z.matrix[2][2] = 5.0;
  error = s21_eq_matrix(&result, &Z);
  ck_assert_int_eq(error, 1);
  s21_remove_matrix(&A);
  s21_remove_matrix(&B);
  s21_remove_matrix(&Z);
  s21_remove_matrix(&result);


#test s21_mult_number_1
  matrix_t A = {0}, result = {0};
  int error = s21_create_matrix(2, 2, &A);
  ck_assert_int_eq(error, 0);
  s21_remove_matrix(&A);
  error = s21_mult_number(&A, 2.5, &result);
  ck_assert_int_eq(error, 1);
  s21_remove_matrix(&result);


#test s21_mult_number_2
  matrix_t A = {0}, Z = {0}, result = {0};
  int error = s21_create_matrix(2, 2, &A);
  ck_assert_int_eq(error, 0);
  s21_full_matrix(1.0, &A);
  error = s21_mult_number(&A, 2.5, &result);
  ck_assert_int_eq(error, 0);
  error = s21_create_matrix(2, 2, &Z);
  ck_assert_int_eq(error, 0);
  Z.matrix[0][0] = 2.5;
  Z.matrix[0][1] = 5.0;
  Z.matrix[1][0] = 7.5;
  Z.matrix[1][1] = 10.0;
  error = s21_eq_matrix(&result, &Z);
  ck_assert_int_eq(error, 1);
  s21_remove_matrix(&A);
  s21_remove_matrix(&Z);
  s21_remove_matrix(&result);


#test s21_mult_number_3
  matrix_t A = {0}, Z = {0}, result = {0};
  int error = s21_create_matrix(3, 3, &A);
  ck_assert_int_eq(error, 0);
  A.matrix[0][0] = 1.0;
  A.matrix[0][1] = 2.0;
  A.matrix[0][2] = 3.0;
  A.matrix[1][0] = 0.0;
  A.matrix[1][1] = 4.0;
  A.matrix[1][2] = 2.0;
  A.matrix[2][0] = 2.0;
  A.matrix[2][1] = 3.0;
  A.matrix[2][2] = 4.0;
  error = s21_mult_number(&A, 2, &result);
  ck_assert_int_eq(error, 0);
  error = s21_create_matrix(3, 3, &Z);
  ck_assert_int_eq(error, 0);
  Z.matrix[0][0] = 2.0;
  Z.matrix[0][1] = 4.0;
  Z.matrix[0][2] = 6.0;
  Z.matrix[1][0] = 0.0;
  Z.matrix[1][1] = 8.0;
  Z.matrix[1][2] = 4.0;
  Z.matrix[2][0] = 4.0;
  Z.matrix[2][1] = 6.0;
  Z.matrix[2][2] = 8.0;
  error = s21_eq_matrix(&result, &Z);
  ck_assert_int_eq(error, 1);
  s21_remove_matrix(&A);
  s21_remove_matrix(&Z);
  s21_remove_matrix(&result);


#test s21_mult_matrix_1
  matrix_t A = {0}, B = {0}, result = {0};
  int error = s21_create_matrix(2, 2, &A);
  ck_assert_int_eq(error, 0);
  error = s21_create_matrix(3, 2, &B);
  ck_assert_int_eq(error, 0);
  error = s21_mult_matrix(&A, &B, &result);
  ck_assert_int_eq(error, 2);
  s21_remove_matrix(&A);
  s21_remove_matrix(&B);
  s21_remove_matrix(&result);


#test s21_mult_matrix_2
  matrix_t A = {0}, B = {0}, result = {0};
  int error = s21_create_matrix(2, 2, &A);
  ck_assert_int_eq(error, 0);
  error = s21_create_matrix(3, 3, &B);
  ck_assert_int_eq(error, 0);
  error = s21_mult_matrix(&A, &B, &result);
  ck_assert_int_eq(error, 2);
  s21_remove_matrix(&A);
  s21_remove_matrix(&B);
  s21_remove_matrix(&result);


#test s21_mult_matrix_3
  matrix_t A = {0}, B = {0}, result = {0};
  int error = s21_create_matrix(2, 2, &A);
  ck_assert_int_eq(error, 0);
  error = s21_create_matrix(2, 2, &B);
  ck_assert_int_eq(error, 0);
  s21_remove_matrix(&A);
  error = s21_mult_matrix(&A, &B, &result);
  ck_assert_int_eq(error, 1);
  s21_remove_matrix(&B);
  s21_remove_matrix(&result);


#test s21_mult_matrix_4
  matrix_t A = {0}, B = {0}, result = {0};
  int error = s21_create_matrix(2, 2, &A);
  ck_assert_int_eq(error, 0);
  error = s21_create_matrix(2, 2, &B);
  ck_assert_int_eq(error, 0);
  s21_remove_matrix(&B);
  error = s21_mult_matrix(&A, &B, &result);
  ck_assert_int_eq(error, 1);
  s21_remove_matrix(&A);
  s21_remove_matrix(&result);


#test s21_mult_matrix_5
  matrix_t A = {0}, B = {0}, Z = {0}, result = {0};
  int error = s21_create_matrix(2, 2, &A);
  ck_assert_int_eq(error, 0);
  s21_full_matrix(1.0, &A);
  error = s21_create_matrix(2, 2, &B);
  ck_assert_int_eq(error, 0);
  s21_full_matrix(1.0, &B);
  error = s21_mult_matrix(&A, &B, &result);
  ck_assert_int_eq(error, 0);
  error = s21_create_matrix(2, 2, &Z);
  ck_assert_int_eq(error, 0);
  Z.matrix[0][0] = 7.0;
  Z.matrix[0][1] = 10.0;
  Z.matrix[1][0] = 15.0;
  Z.matrix[1][1] = 22.0;
  error = s21_eq_matrix(&result, &Z);
  ck_assert_int_eq(error, 1);
  s21_remove_matrix(&A);
  s21_remove_matrix(&B);
  s21_remove_matrix(&Z);
  s21_remove_matrix(&result);


#test s21_mult_matrix_6
  matrix_t A = {0}, B = {0}, Z = {0}, result = {0};
  int error = s21_create_matrix(3, 2, &A);
  ck_assert_int_eq(error, 0);
  A.matrix[0][0] = 1.0;
  A.matrix[0][1] = 4.0;
  A.matrix[1][0] = 2.0;
  A.matrix[1][1] = 5.0;
  A.matrix[2][0] = 3.0;
  A.matrix[2][1] = 6.0;
  error = s21_create_matrix(2, 3, &B);
  ck_assert_int_eq(error, 0);
  B.matrix[0][0] = 1.0;
  B.matrix[0][1] = -1.0;
  B.matrix[0][2] = 1.0;
  B.matrix[1][0] = 2.0;
  B.matrix[1][1] = 3.0;
  B.matrix[1][2] = 4.0;
  error = s21_mult_matrix(&A, &B, &result);
  ck_assert_int_eq(error, 0);
  error = s21_create_matrix(3, 3, &Z);
  ck_assert_int_eq(error, 0);
  Z.matrix[0][0] = 9.0;
  Z.matrix[0][1] = 11.0;
  Z.matrix[0][2] = 17.0;
  Z.matrix[1][0] = 12.0;
  Z.matrix[1][1] = 13.0;
  Z.matrix[1][2] = 22.0;
  Z.matrix[2][0] = 15.0;
  Z.matrix[2][1] = 15.0;
  Z.matrix[2][2] = 27.0;
  error = s21_eq_matrix(&result, &Z);
  ck_assert_int_eq(error, 1);
  s21_remove_matrix(&A);
  s21_remove_matrix(&B);
  s21_remove_matrix(&Z);
  s21_remove_matrix(&result);


#test s21_transpose_1
  matrix_t A = {0}, result = {0};
  int error = s21_create_matrix(2, 2, &A);
  ck_assert_int_eq(error, 0);
  s21_remove_matrix(&A);
  error = s21_transpose(&A, &result);
  ck_assert_int_eq(error, 1);
  s21_remove_matrix(&result);


#test s21_transpose_2
  matrix_t A = {0}, Z = {0}, result = {0};
  int error = s21_create_matrix(2, 2, &A);
  ck_assert_int_eq(error, 0);
  s21_full_matrix(1.0, &A);
  error = s21_transpose(&A, &result);
  ck_assert_int_eq(error, 0);
  error = s21_create_matrix(2, 2, &Z);
  ck_assert_int_eq(error, 0);
  Z.matrix[0][0] = 1.0;
  Z.matrix[0][1] = 3.0;
  Z.matrix[1][0] = 2.0;
  Z.matrix[1][1] = 4.0;
  error = s21_eq_matrix(&result, &Z);
  ck_assert_int_eq(error, 1);
  s21_remove_matrix(&A);
  s21_remove_matrix(&Z);
  s21_remove_matrix(&result);


#test s21_transpose_3
  matrix_t A = {0}, Z = {0}, result = {0};
  int error = s21_create_matrix(3, 2, &A);
  ck_assert_int_eq(error, 0);
  A.matrix[0][0] = 1.0;
  A.matrix[0][1] = 4.0;
  A.matrix[1][0] = 2.0;
  A.matrix[1][1] = 5.0;
  A.matrix[2][0] = 3.0;
  A.matrix[2][1] = 6.0;
  error = s21_transpose(&A, &result);
  ck_assert_int_eq(error, 0);
  error = s21_create_matrix(2, 3, &Z);
  ck_assert_int_eq(error, 0);
  Z.matrix[0][0] = 1.0;
  Z.matrix[0][1] = 2.0;
  Z.matrix[0][2] = 3.0;
  Z.matrix[1][0] = 4.0;
  Z.matrix[1][1] = 5.0;
  Z.matrix[1][2] = 6.0;
  error = s21_eq_matrix(&result, &Z);
  ck_assert_int_eq(error, 1);
  s21_remove_matrix(&A);
  s21_remove_matrix(&Z);
  s21_remove_matrix(&result);


#test s21_determinant_1
  matrix_t A = {0};
  double result;
  int error = s21_create_matrix(2, 2, &A);
  ck_assert_int_eq(error, 0);
  s21_remove_matrix(&A);
  error = s21_determinant(&A, &result);
  ck_assert_int_eq(error, 1);


#test s21_determinant_2
  matrix_t A = {0};
  double result;
  int error = s21_create_matrix(2, 3, &A);
  ck_assert_int_eq(error, 0);
  s21_full_matrix(1.0, &A);
  error = s21_determinant(&A, &result);
  ck_assert_int_eq(error, 2);
  s21_remove_matrix(&A);


#test s21_determinant_3
  matrix_t A = {0};
  double result;
  int error = s21_create_matrix(2, 2, &A);
  ck_assert_int_eq(error, 0);
  s21_full_matrix(1.0, &A);
  error = s21_determinant(&A, &result);
  ck_assert_int_eq(error, 0);
  ck_assert_int_eq(result, -2);
  s21_remove_matrix(&A);


#test s21_determinant_4
  matrix_t A = {0};
  double result;
  int error = s21_create_matrix(3, 3, &A);
  ck_assert_int_eq(error, 0);
  s21_full_matrix(1.0, &A);
  error = s21_determinant(&A, &result);
  ck_assert_int_eq(error, 0);
  ck_assert_int_eq(result, 0);
  s21_remove_matrix(&A);


#test s21_determinant_5
  matrix_t A = {0};
  double result;
  int error = s21_create_matrix(3, 3, &A);
  ck_assert_int_eq(error, 0);
  A.matrix[0][0] = 0.0;
  A.matrix[0][1] = 1.0;
  A.matrix[0][2] = 2.0;
  A.matrix[1][0] = 3.0;
  A.matrix[1][1] = 4.0;
  A.matrix[1][2] = 5.0;
  A.matrix[2][0] = 6.0;
  A.matrix[2][1] = 7.0;
  A.matrix[2][2] = 8.0;
  error = s21_determinant(&A, &result);
  ck_assert_int_eq(error, 0);
  ck_assert_int_eq(result, 0);
  s21_remove_matrix(&A);


#test s21_inverse_matrix_1
  matrix_t A = {0}, result = {0};
  int error = s21_create_matrix(2, 2, &A);
  ck_assert_int_eq(error, 0);
  s21_remove_matrix(&A);
  error = s21_inverse_matrix(&A, &result);
  ck_assert_int_eq(error, 2);
  s21_remove_matrix(&result);


#test s21_inverse_matrix_2
  matrix_t A = {0}, result = {0};
  int error = s21_create_matrix(2, 3, &A);
  ck_assert_int_eq(error, 0);
  s21_full_matrix(1.0, &A);
  error = s21_inverse_matrix(&A, &result);
  ck_assert_int_eq(error, 2);
  s21_remove_matrix(&A);
  s21_remove_matrix(&result);


#test s21_inverse_matrix_3
  matrix_t A = {0}, Z = {0}, result = {0};
  int error = s21_create_matrix(2, 2, &A);
  ck_assert_int_eq(error, 0);
  s21_full_matrix(1.0, &A);
  error = s21_inverse_matrix(&A, &result);
  ck_assert_int_eq(error, 0);
  error = s21_create_matrix(2, 2, &Z);
  ck_assert_int_eq(error, 0);
  Z.matrix[0][0] = -2.0;
  Z.matrix[0][1] = 1.0;
  Z.matrix[1][0] = 1.5;
  Z.matrix[1][1] = -0.5;
  error = s21_eq_matrix(&result, &Z);
  ck_assert_int_eq(error, 1);
  s21_remove_matrix(&A);
  s21_remove_matrix(&Z);
  s21_remove_matrix(&result);


#test s21_inverse_matrix_4
  matrix_t A = {0}, Z = {0}, result = {0};
  int error = s21_create_matrix(3, 3, &A);
  ck_assert_int_eq(error, 0);
  A.matrix[0][0] = 2.0;
  A.matrix[0][1] = 5.0;
  A.matrix[0][2] = 7.0;
  A.matrix[1][0] = 6.0;
  A.matrix[1][1] = 3.0;
  A.matrix[1][2] = 4.0;
  A.matrix[2][0] = 5.0;
  A.matrix[2][1] = -2.0;
  A.matrix[2][2] = -3.0;
  error = s21_inverse_matrix(&A, &result);
  ck_assert_int_eq(error, 0);
  error = s21_create_matrix(3, 3, &Z);
  ck_assert_int_eq(error, 0);
  Z.matrix[0][0] = 1.0;
  Z.matrix[0][1] = -1.0;
  Z.matrix[0][2] = 1.0;
  Z.matrix[1][0] = -38.0;
  Z.matrix[1][1] = 41.0;
  Z.matrix[1][2] = -34.0;
  Z.matrix[2][0] = 27.0;
  Z.matrix[2][1] = -29.0;
  Z.matrix[2][2] = 24.0;
  error = s21_eq_matrix(&result, &Z);
  ck_assert_int_eq(error, 1);
  s21_remove_matrix(&A);
  s21_remove_matrix(&Z);
  s21_remove_matrix(&result);


#test s21_calc_complements_1
  matrix_t A = {0}, result = {0};
  int error = s21_create_matrix(2, 2, &A);
  ck_assert_int_eq(error, 0);
  s21_remove_matrix(&A);
  error = s21_calc_complements(&A, &result);
  ck_assert_int_eq(error, 0);
  s21_remove_matrix(&result);


#test s21_calc_complements_2
  matrix_t A = {0}, result = {0};
  int error = s21_create_matrix(2, 3, &A);
  ck_assert_int_eq(error, 0);
  s21_full_matrix(1.0, &A);
  error = s21_calc_complements(&A, &result);
  ck_assert_int_eq(error, 2);
  s21_remove_matrix(&A);
  s21_remove_matrix(&result);


#test s21_calc_complements_3
  matrix_t A = {0}, Z = {0}, result = {0};
  int error = s21_create_matrix(2, 2, &A);
  ck_assert_int_eq(error, 0);
  s21_full_matrix(1.0, &A);
  error = s21_calc_complements(&A, &result);
  ck_assert_int_eq(error, 0);
  error = s21_create_matrix(2, 2, &Z);
  ck_assert_int_eq(error, 0);
  Z.matrix[0][0] = 4.0;
  Z.matrix[0][1] = -3.0;
  Z.matrix[1][0] = -2.0;
  Z.matrix[1][1] = 1.0;
  error = s21_eq_matrix(&result, &Z);
  ck_assert_int_eq(error, 1);
  s21_remove_matrix(&A);
  s21_remove_matrix(&Z);
  s21_remove_matrix(&result);


#test s21_calc_complements_4
  matrix_t A = {0}, Z = {0}, result = {0};
  int error = s21_create_matrix(3, 3, &A);
  ck_assert_int_eq(error, 0);
  A.matrix[0][0] = 1.0;
  A.matrix[0][1] = 2.0;
  A.matrix[0][2] = 3.0;
  A.matrix[1][0] = 0.0;
  A.matrix[1][1] = 4.0;
  A.matrix[1][2] = 2.0;
  A.matrix[2][0] = 5.0;
  A.matrix[2][1] = 2.0;
  A.matrix[2][2] = 1.0;
  error = s21_calc_complements(&A, &result);
  ck_assert_int_eq(error, 0);
  error = s21_create_matrix(3, 3, &Z);
  ck_assert_int_eq(error, 0);
  Z.matrix[0][0] = 0.0;
  Z.matrix[0][1] = 10.0;
  Z.matrix[0][2] = -20.0;
  Z.matrix[1][0] = 4.0;
  Z.matrix[1][1] = -14.0;
  Z.matrix[1][2] = 8.0;
  Z.matrix[2][0] = -8.0;
  Z.matrix[2][1] = -2.0;
  Z.matrix[2][2] = 4.0;
  error = s21_eq_matrix(&result, &Z);
  ck_assert_int_eq(error, 1);
  s21_remove_matrix(&A);
  s21_remove_matrix(&Z);
  s21_remove_matrix(&result);

